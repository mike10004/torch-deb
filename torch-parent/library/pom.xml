<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.github.mike10004</groupId>
        <artifactId>torch-parent</artifactId>
        <version>7.0_3</version>
    </parent>
    <artifactId>torch-library</artifactId>
    <packaging>pom</packaging>
    <name>library</name>
    <description>Torch library build area</description>
    <properties>
        <distro.url>https://github.com/torch/distro.git</distro.url>
        <construction.area>${project.build.directory}/construction-area</construction.area>
        <install.zip>${project.build.directory}/torch-library.zip</install.zip>
        <outputLib.pathname>${install.zip}</outputLib.pathname>
        <torchBuildProduct.descriptor.file>${project.build.testOutputDirectory}/torch-build-product.txt</torchBuildProduct.descriptor.file>
    </properties>
    <profiles>
    </profiles>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <executions>
                    <execution>
                        <id>force-test-compile</id>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                </configuration>
                <executions>
                    <execution>
                        <id>force-surefire-test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <id>failsafe-integration-test</id>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>failsafe-verify</id>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>clone-torch</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${prebuilt.library.zip.exists}</skip>
                            <executable>git</executable>
                            <arguments>
                                <argument>clone</argument>
                                <argument>${distro.url}</argument>
                                <argument>${construction.area}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>compile-torch</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${prebuilt.library.zip.exists}</skip>
                            <executable>${construction.area}/install.sh</executable>
                            <workingDirectory>${construction.area}</workingDirectory>
                            <environmentVariables>
                                <PREFIX>${install.prefix}</PREFIX>
                            </environmentVariables>
                            <arguments>
                                <argument>-s</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>install-openface-lua-rocks-dpnn</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${prebuilt.library.zip.exists}</skip>
                            <executable>${install.prefix}/bin/luarocks</executable>
                            <workingDirectory>${construction.area}</workingDirectory>
                            <arguments>
                                <argument>--to=${install.prefix}</argument>
                                <argument>install</argument>
                                <argument>dpnn</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>install-openface-lua-rocks-nn</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${prebuilt.library.zip.exists}</skip>
                            <executable>${install.prefix}/bin/luarocks</executable>
                            <workingDirectory>${construction.area}</workingDirectory>
                            <arguments>
                                <argument>--to=${install.prefix}</argument>
                                <argument>install</argument>
                                <argument>nn</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>install-openface-lua-rocks-csvigo</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${prebuilt.library.zip.exists}</skip>
                            <executable>${install.prefix}/bin/luarocks</executable>
                            <workingDirectory>${construction.area}</workingDirectory>
                            <arguments>
                                <argument>--to=${install.prefix}</argument>
                                <argument>install</argument>
                                <argument>csvigo</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unzip-prebuilt-for-tests</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${prebuilt.library.zip.ignore}</skip>
                            <target>
                                <unzip src="${prebuilt.library.zip}" dest="${project.build.testOutputDirectory}/torch-prebuilt"/>
                                <echo file="${torchBuildProduct.descriptor.file}">${project.build.testOutputDirectory}/torch-prebuilt</echo>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>notprebuilt-write-build-product-descriptor</id>
                        <phase>generate-test-resources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${prebuilt.library.zip.exists}</skip>
                            <target>
                                <echo file="${torchBuildProduct.descriptor.file}">${install.prefix}</echo>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>remove-existing-cloned-dir</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <delete dir="${construction.area}" quiet="true"/>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>prepare-for-torch-compile</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <mkdir dir="${install.prefix}"/>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>zip-compiled-torch</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${prebuilt.library.zip.exists}</skip>
                            <target>
                                <zip basedir="${install.prefix}" destfile="${install.zip}"/>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-prebuilt-zip</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${prebuilt.library.zip.ignore}</skip>
                            <target>
                                <copy file="${prebuilt.library.zip}" tofile="${install.zip}"/>
                            </target>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-output-lib</id>
                        <phase>install</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${outputLib.copy.skip}</skip>
                            <target>
                                <copy file="${outputLib.pathname}" todir="${outputLib.copy.destination}"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-artifact</id>
                        <phase>package</phase>
                        <goals>
                            <goal>attach-artifact</goal>
                        </goals>
                        <configuration>
                            <artifacts>
                                <artifact>
                                    <file>${install.zip}</file>
                                    <type>zip</type>
                                </artifact>
                            </artifacts>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-compress</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
    </dependencies>
</project>
